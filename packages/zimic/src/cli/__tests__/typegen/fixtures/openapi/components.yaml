openapi: 3.1.0

info:
  version: 1.0.0
  title: Components

paths:
  /pets:
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '201':
          description: Empty response
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/archived'

        - name: otherSearch
          in: query
          description: The search text
          required: false
          schema:
            type: string
            default: ''
        - name: otherLimit
          in: query
          description: How many items to return at one time
          required: true
          schema:
            type: integer
            format: int32
            maximum: 100
        - name: otherArchived
          in: query
          description: Whether to include archived pets
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
        '400':
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    PetTag:
      type: string
      enum:
        - bird
        - cat
        - dog
        - fish

    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: object
          nullable: true
          properties:
            code:
              $ref: '#/components/schemas/PetTag'

    Pets:
      type: array
      items:
        $ref: '#/components/schemas/Pet'

    PetsWithCount:
      type: object
      properties:
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
        numberOfPets:
          type: integer
          format: int32

    PetsWithDogCount:
      type: object
      properties:
        dogs:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
        numberOfDogs:
          type: integer
          format: int32

    PetsWithAnyCount:
      anyOf:
        - $ref: '#/components/schemas/PetsWithCount'
        - $ref: '#/components/schemas/PetsWithDogCount'

    PatsWithAllCounts:
      allOf:
        - $ref: '#/components/schemas/PetsWithCount'
        - $ref: '#/components/schemas/PetsWithDogCount'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        issues:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
            additionalProperties:
              type: string

  parameters:
    search:
      name: search
      in: query
      description: The search text
      required: false
      schema:
        type: string
        default: ''

    limit:
      name: limit
      in: query
      description: How many items to return at one time
      required: true
      schema:
        type: integer
        format: int32
        maximum: 100

    archived:
      name: archived
      in: query
      description: Whether to include archived pets
      required: false
      schema:
        type: boolean
        default: false

    order:
      name: order
      in: query
      description: The sort order
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
