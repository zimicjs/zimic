// Auto-generated by zimic.
// NOTE: Do not manually edit this file. Changes will be overridden.

import type { HttpHeadersSerialized, HttpSchema, HttpStatusCode, MergeHttpResponsesByStatusCode } from '@/http';

export type MyServiceSchema = HttpSchema<{
  '/users-with-non-numeric-status-codes': {
    POST: {
      response: MergeHttpResponsesByStatusCode<
        [
          {
            100: {};
            201: MyServiceComponents['responses']['userCreated'];
            400: MyServiceComponents['responses']['validationError'];
            404: MyServiceComponents['responses']['notFoundError'];
            503: {};
          },
          {
            [StatusCode in HttpStatusCode.Information]: {};
          },
          {
            [StatusCode in HttpStatusCode.Success]: {};
          },
          {
            [StatusCode in HttpStatusCode.ClientError]: MyServiceComponents['responses']['clientError'];
          },
          {
            [StatusCode in HttpStatusCode.ServerError]: MyServiceComponents['responses']['serverError'];
          },
          {
            [StatusCode in HttpStatusCode]: MyServiceComponents['responses']['error'];
          },
        ]
      >;
    };
  };
  '/users-with-no-request': {
    POST: {
      response: MergeHttpResponsesByStatusCode<
        [
          {
            200: MyServiceComponents['responses']['userCreated'];
          },
          {
            [StatusCode in HttpStatusCode]: MyServiceComponents['responses']['error'];
          },
        ]
      >;
    };
  };
  '/users-with-multiple-reference-response-contents': {
    POST: {
      response: {
        200: MyServiceComponents['responses']['userCreatedMultipleContents'];
        400: MyServiceComponents['responses']['error'];
      };
    };
  };
  '/users-with-multiple-literal-response-contents': {
    POST: {
      response: {
        200:
          | {
              headers: HttpHeadersSerialized<{
                'content-type': 'application/json';
              }>;
              body: {
                type: 'user-as-json';
                value: MyServiceComponents['schemas']['User'];
              };
            }
          | {
              headers: HttpHeadersSerialized<{
                'content-type': 'application/xml';
              }>;
              body: {
                type: 'user-as-xml';
                value: MyServiceComponents['schemas']['User'];
              };
            };
        400: MyServiceComponents['responses']['error'];
      };
    };
  };
  '/users-with-multiple-literal-response-contents-having-headers': {
    POST: {
      response: {
        200:
          | {
              headers: HttpHeadersSerialized<{
                'content-type': 'application/json';
                'x-value'?: string;
              }>;
              body: {
                type: 'user-as-json';
                value: MyServiceComponents['schemas']['User'];
              };
            }
          | {
              headers: HttpHeadersSerialized<{
                'content-type': 'application/xml';
                'x-value'?: string;
              }>;
              body: {
                type: 'user-as-xml';
                value: MyServiceComponents['schemas']['User'];
              };
            };
        400: MyServiceComponents['responses']['error'];
      };
    };
  };
  '/users-with-no-response-content': {
    POST: {
      response: {
        200: {};
      };
    };
  };
  '/users-with-no-request-or-response': {
    POST: {};
  };
}>;

export interface MyServiceComponents {
  schemas: {
    User: {
      id: string;
      name?: string;
      email: string;
      createdAt: string;
      updatedAt: string;
    };
  };
  responses: {
    userCreated: HttpSchema.Response<{
      body: MyServiceComponents['schemas']['User'];
    }>;
    userCreatedMultipleContents: HttpSchema.Response<
      | {
          headers: HttpHeadersSerialized<{
            'content-type': 'application/json';
          }>;
          body: {
            type?: 'user-as-json';
            value?: MyServiceComponents['schemas']['User'];
          };
        }
      | {
          headers: HttpHeadersSerialized<{
            'content-type': 'application/xml';
          }>;
          body: {
            type?: 'user-as-xml';
            value?: MyServiceComponents['schemas']['User'];
          };
        }
    >;
    notFoundError: HttpSchema.Response<{
      body: {
        message: string;
        code?: 'NOT_FOUND';
      };
    }>;
    validationError: HttpSchema.Response<{
      body: {
        message: string;
        code?: 'VALIDATION_ERROR';
      };
    }>;
    clientError: HttpSchema.Response<{
      body: {
        message: string;
        code?: 'CLIENT_ERROR';
      };
    }>;
    serverError: HttpSchema.Response<{
      body: {
        message: string;
        code?: 'SERVER_ERROR';
      };
    }>;
    error: HttpSchema.Response<{
      body: {
        message: string;
      };
    }>;
  };
}
