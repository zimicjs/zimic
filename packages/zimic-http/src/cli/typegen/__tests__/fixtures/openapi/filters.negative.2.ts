// Auto-generated by zimic.
// NOTE: Do not manually edit this file. Changes will be overridden.

import type { HttpFormData, HttpSchema, HttpSearchParams } from '@/index';

export type MyServiceSchema = HttpSchema<{
  '/notifications': {
    GET: MyServiceOperations['getNotifications'];
    DELETE: MyServiceOperations['deleteNotifications'];
  };
  '/uploads': {
    POST: {
      request: MyServiceComponents['requests']['fileUpload'] & {
        headers: {
          'api-key': string;
        };
      };
      response: {
        200:
          | {
              headers: {
                'content-type': 'application/json';
                'x-upload-id'?: string;
              };
              body: {
                id?: string;
              };
            }
          | {
              headers: {
                'content-type': 'x-www-form-urlencoded';
                'x-upload-id'?: string;
              };
              body: HttpSearchParams<{
                id?: string;
              }>;
            };
      };
    };
  };
}>;

export interface MyServiceComponents {
  schemas: {
    Notification: {
      id: number;
      message: string;
    };
    Notifications: MyServiceComponents['schemas']['Notification'][];
  };
  responses: {
    error: {
      headers: {
        'content-type': 'application/json';
      };
      body: {
        message: string;
      };
    };
  };
  parameters: {
    from: string;
    authorization: string;
  };
  requests: {
    fileUpload: {
      headers: {
        'content-type': 'multipart/form-data';
      };
      body: HttpFormData<{
        name: string;
        content: Blob | null;
      }>;
    };
  };
}

export interface MyServiceOperations {
  getNotifications: {
    request: {
      searchParams: {
        from?: MyServiceComponents['parameters']['from'];
      };
    };
    response: {
      200: {
        headers: {
          'content-type': 'application/json';
        };
        body: MyServiceComponents['schemas']['Notifications'];
      };
    };
  };
  deleteNotifications: {
    request: {
      headers: {
        authorization: MyServiceComponents['parameters']['authorization'];
      };
    };
    response: {
      204: {};
      400: MyServiceComponents['responses']['error'];
    };
  };
}
