name: Zimic Setup
description: Configure the Zimic project after checking out the code.

inputs:
  node-version:
    description: Node.js version to use
    required: false
    default: lts/*
  node-registry-url:
    description: Node.js registry URL to use (provide only if the action is going to push a release)
    required: false
  turbo-token:
    description: Turbo remote cache token
    required: false
  turbo-team:
    description: Turbo remote cache team
    required: false
  install:
    description: Filter to install the dependencies of a specific app or package
    required: false
  build:
    description: Filter to build the dependencies of a specific app or package
    required: false

outputs:
  install-filters:
    description: Filter flags of the packages included in the install step
    value: ${{ steps.filters.outputs.install }}
  build-filters:
    description: Filter flags of the packages included in the build step
    value: ${{ steps.filters.outputs.build }}

runs:
  using: composite
  steps:
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: ${{ inputs.node-registry-url }}

    - name: Install pnpm
      uses: pnpm/action-setup@v4

    - name: Get pnpm store directory
      id: pnpm-store
      shell: bash
      run: echo "path=$(pnpm store path)" >> $GITHUB_OUTPUT

    - name: Restore pnpm cache
      id: pnpm-cache
      uses: actions/cache/restore@v4
      with:
        path: ${{ steps.pnpm-store.outputs.path }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Restore turbo cache
      uses: actions/cache/restore@v4
      with:
        path: .turbo
        key: ${{ runner.os }}-turbo

    - name: Get installation and build filters
      id: filters
      shell: bash
      run: |
        function composeFilterOptions() {
          filterEntries=${*}
          filterOptions=()

          for filterEntry in ${filterEntries[@]}; do
            filterOptions+=("--filter '$filterEntry'")
          done

          echo "${filterOptions[@]}"
        }

        if [[ '${{ inputs.install }}' == '' ]]; then
          installFilters=''
          fullInstallFilters='--filter zimic-root'
        else
          installFilters="$(composeFilterOptions ${{ inputs.install }})"
          fullInstallFilters="--filter zimic-root $installFilters"
        fi

        if [[ '${{ inputs.build }}' == '' ]]; then
          buildFilters=''
        else
          buildFilters="$(composeFilterOptions ${{ inputs.build }})"
        fi

        echo "install=$installFilters" >> $GITHUB_OUTPUT
        echo "full-install=$fullInstallFilters" >> $GITHUB_OUTPUT
        echo "build=$buildFilters" >> $GITHUB_OUTPUT

    - name: Install dependencies
      shell: bash
      run: pnpm install --prefer-offline --frozen-lockfile ${{ steps.filters.outputs.full-install }}

    - name: Get playwright information
      id: playwright
      shell: bash
      run: |
        versions=$(
          pnpm list playwright --recursive --json |
            jq '.[] | to_entries[] | select(.key | test("dependencies"; "i")) | .value.playwright.version' --raw-output |
            sort -V |
            uniq |
            paste --serial --delimiters '-' -
        )
        echo "versions=$versions" >> $GITHUB_OUTPUT

    - name: Restore playwright cache
      id: playwright-cache
      uses: actions/cache/restore@v4
      with:
        path: /home/runner/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ steps.playwright.outputs.versions }}
        restore-keys: |
          ${{ runner.os }}-playwright-

    - name: Build packages
      shell: bash
      run: |
        if [[ '${{ steps.filters.outputs.build }}' != '' ]]; then
          pnpm turbo build ${{ steps.filters.outputs.build }}
          pnpm install --offline ${{ steps.filters.outputs.full-install }}
        fi
      env:
        NODE_VERSION: ${{ inputs.node-version }}
        TURBO_TOKEN: ${{ inputs.turbo-token }}
        TURBO_TEAM: ${{ inputs.turbo-team }}
        TURBO_LOG_ORDER: stream

    - name: Set up dependencies
      shell: bash
      run: |
        pnpm run --recursive --if-present --stream \
          ${{ steps.filters.outputs.full-install }} \
          deps:setup-msw

        pnpm run --recursive --if-present --stream \
          ${{ steps.filters.outputs.full-install }} \
          deps:setup-zimic

        pnpm run --recursive --if-present --stream \
          ${{ steps.filters.outputs.full-install }} \
          deps:setup-playwright
      env:
        NODE_VERSION: ${{ inputs.node-version }}
        TURBO_TOKEN: ${{ inputs.turbo-token }}
        TURBO_TEAM: ${{ inputs.turbo-team }}
        TURBO_LOG_ORDER: stream

    - name: Save pnpm cache
      uses: actions/cache/save@v4
      if: ${{ steps.pnpm-cache.outputs.cache-hit != 'true' }}
      with:
        path: ${{ steps.pnpm-store.outputs.path }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

    - name: Save playwright cache
      uses: actions/cache/save@v4
      if: ${{ steps.playwright-cache.outputs.cache-hit != 'true' }}
      with:
        path: /home/runner/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ steps.playwright.outputs.versions }}
