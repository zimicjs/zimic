name: Zimic Release Comments
description: Comment on related issues and pull requests after a Zimic release and close the milestone.

inputs:
  type:
    description: The type of the release (package or documentation)
    required: true
  ref-name:
    description: The Git reference name to create release comments for
    required: true
  project-name:
    description: The project name to create release comments for
    required: true

runs:
  using: composite
  steps:
    - name: Create release comments and close milestone
      uses: actions/github-script@v7
      with:
        script: |
          const DELAY_BETWEEN_COMMENTS = 1000;
          const PER_PAGE = 100;

          const projectName = '${{ inputs.project-name }}';
          const tag = '${{ inputs.ref-name }}';
          const version = tag.replace(/^@[^@]+@|^v/, '');

          const githubOwner = 'zimicjs';
          const githubRepository = 'zimic';

          const type = '${{ inputs.type }}';

          let milestone = undefined;

          for (let page = 1; milestone === undefined; page++) {
            console.log(`Fetching milestone ${tag}... (page ${page})`);

            const milestones = await github.rest.issues.listMilestones({
              owner: githubOwner,
              repo: githubRepository,
              state: 'open',
              page,
              per_page: PER_PAGE,
            });

            milestone = milestones.data.find((milestone) => milestone.title === tag);

            if (milestones.data.length < PER_PAGE) {
              break;
            }
          }

          if (milestone) {
            console.log(`Milestone ${tag} found.`);

            for (let page = 1; ; page++) {
              console.log(`Fetching issues and pull requests with milestone ${tag}... (page ${page})`);

              const issues = await github.rest.issues.listForRepo({
                owner: githubOwner,
                repo: githubRepository,
                milestone: milestone.number,
                state: 'all',
                page,
                per_page: PER_PAGE,
              });

              for (const issue of issues.data) {
                console.log(`Creating release comment on #${issue.number}...`);

                try {
                  await github.rest.issues.createComment({
                    owner: githubOwner,
                    repo: githubRepository,
                    issue_number: issue.number,
                    body: [
                      `### Released in [${tag}](https://github.com/${githubOwner}/${githubRepository}/releases/tag/${tag}) :tada:\n`,
                      `- [**:pushpin: Release notes**](https://github.com/${githubOwner}/${githubRepository}/releases/tag/${tag})`,
                      type === 'package' && `- [**:package: NPM package**](https://www.npmjs.com/package/${projectName}/v/${version})`,
                    ].filter(Boolean).join('\n'),
                  });

                  console.log(`Release comment created on #${issue.number}.`);

                  await new Promise((resolve) => setTimeout(resolve, DELAY_BETWEEN_COMMENTS));
                } catch (error) {
                  console.error(`Could not create release comment on #${issue.number}.`);
                  console.error(error);

                  await new Promise((resolve) => setTimeout(resolve, DELAY_BETWEEN_COMMENTS * 5));
                }
              }

              if (issues.data.length < PER_PAGE) {
                break;
              }
            }

            console.log(`Closing milestone ${tag}...`);

            await github.rest.issues.updateMilestone({
              owner: githubOwner,
              repo: githubRepository,
              milestone_number: milestone.number,
              state: 'closed',
            });

            console.log('All done!');
          } else {
            console.warn(`Milestone ${tag} not found.`);
          }
