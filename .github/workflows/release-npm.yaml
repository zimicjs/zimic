name: Release to NPM

on:
  release:
    types:
      - published

concurrency:
  group: release-npm-${{ github.ref_name }}
  cancel-in-progress: true

env:
  NODE_VERSION: 20
  TURBO_LOG_ORDER: stream

jobs:
  release-zimic-to-npm:
    name: Release zimic to NPM
    runs-on: ubuntu-latest
    timeout-minutes: 15

    environment: NPM

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Zimic
        uses: ./.github/actions/zimic-setup
        with:
          node-version: ${{ env.NODE_VERSION }}
          node-registry-url: https://registry.npmjs.org
          install: zimic...
          build: zimic^...
          install-playwright-browsers: true

      - name: Build zimic
        run: pnpm turbo build --filter zimic

      - name: Prepare NPM tag
        id: npm-tag
        run: |
          if [[ '${{ github.ref_name }}' == v*.*.*-canary.* ]]; then
            echo "tag=canary" >> $GITHUB_OUTPUT
          elif [[ '${{ github.ref_name }}' == v*.*.* ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=next" >> $GITHUB_OUTPUT
          fi

      - name: Release to NPM
        working-directory: packages/zimic
        run: pnpm publish --no-git-checks --tag ${{ steps.npm-tag.outputs.tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ZIMIC_NPM_RELEASE_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Test released package
        run: |
          sed -i \
            's/link-workspace-packages = true/link-workspace-packages = false/' \
            .npmrc

          for packageJSON in apps/zimic-test-client/package.json examples/package.json examples/*/package.json; do
            sed -E -i \
              's/"zimic([0-9]?)": ".*"/"zimic\1": "npm:zimic@${{ steps.npm-tag.outputs.tag }}"/' \
              $packageJSON
          done


          pnpm install --no-frozen-lockfile

          pnpm turbo \
            types:check lint:turbo \
            --continue \
            --concurrency 100% \
            --filter zimic-test-client \
            --filter zimic-examples \
            --filter 'zimic-example-*'

          pnpm turbo \
            test:turbo \
            --continue \
            --concurrency 1 \
            --filter zimic-test-client \
            --filter zimic-examples \
            --filter 'zimic-example-*'

  post-release-zimic-to-npm:
    name: Post release zimic to NPM
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [release-zimic-to-npm]

    steps:
      - name: Create release comments on related issues and pull requests
        uses: actions/github-script@v7
        with:
          script: |
            const tag = context.ref.replace(/^refs\/tags\//, '');
            const version = tag.replace(/^v/, '');

            const { owner, repo: repository } = context.repo.owner;

            let milestone = undefined;

            for (let page = 1; milestone !== undefined; page++) {
              console.log(`Fetching milestone ${tag}... (page ${page})`);

              const milestones = await github.rest.issues.listMilestones({
                owner,
                repo: repository,
                state: 'open',
                page,
                per_page: 100,
              });

              if (milestones.data.length === 0) {
                break;
              }

              milestone = milestones.data.find((milestone) => milestone.title === tag);
            }

            if (milestone) {
              for (let page = 1; ; page++) {
                console.log(`Fetching issues and pull requests with milestone ${tag}... (page ${page})`);

                const issues = await github.rest.issues.listForRepo({
                  owner,
                  repo: repository,
                  milestone: milestone.number,
                  state: 'all',
                  page,
                  per_page: 100,
                });

                if (issues.data.length === 0) {
                  break;
                }

                for (const issue of issues.data) {
                  console.log(`Creating release comment on issue #${issue.number}...`);

                  await github.rest.issues.createComment({
                    owner,
                    repo: repository,
                    issue_number: issue.number,
                    body: [
                      `### Released in [${tag}](https://github.com/${owner}/${repository}/releases/tag/${tag}) :tada:\n`,
                      `- [**:pushpin: Release notes**](https://github.com/${owner}/${repository}/releases/tag/${tag})`,
                      `- [**:package: NPM package**](https://www.npmjs.com/package/${repository}/v/${version})`,
                    ].join('\n'),
                  });
                }
              }

              console.log(`Closing milestone ${tag}...`);

              await github.rest.issues.updateMilestone({
                owner,
                repo: repository,
                milestone_number: milestone.number,
                state: 'closed',
              });

              console.log('All done!');
            } else {
              console.warn(`Milestone ${tag} not found.`);
            }
